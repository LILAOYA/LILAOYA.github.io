{"name":"spring","slug":"spring","count":5,"postlist":[{"title":"spring.01.初步了解spring以及IOC","uid":"b153846ea7b11a1e236e2e9eb42afa6c","slug":"spring.01.初步了解spring以及IOC","date":"2022-03-11T14:00:15.000Z","updated":"2022-03-12T00:22:27.754Z","comments":true,"path":"api/articles/spring.01.初步了解spring以及IOC.json","keywords":null,"cover":"/img/spring.png","text":"1.spring简述Spring是一个轻量级的开源框架，是为解决企业级应用开发的复杂性而创建的，通过核心的Bean factory实现了底层的类的实例化和生命周期的管理。 Spring的最根本使命是：简化java开发。 优点 Spring是一个开源免费的框架 Spring是一个轻...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"/头像/100.jpg","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},{"title":"spring.03.spring的自动注入","uid":"dbac222cea299f8d84b40392321badcf","slug":"spring.03.spring的自动注入","date":"2022-03-11T14:26:15.000Z","updated":"2022-03-11T15:01:07.676Z","comments":true,"path":"api/articles/spring.03.spring的自动注入.json","keywords":null,"cover":"/img/spring.png","text":"spring引用类型的自动注入引用类型的自动注入： spring框架根据某些规则可以给引用类型赋值。不用手动给引用类型赋值了。使用的规则常用的是byName, byType。 1.byName(按名称注入) ：java类中引用类型的属性名和spring容器中（配置文件）&lt;b...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"/头像/100.jpg","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},{"title":"spring.02.spring基于xml的DI","uid":"fa52b34bae7d4c54b1124245f3ed007f","slug":"spring.02.spring基于xml的DI","date":"2022-03-11T14:16:15.000Z","updated":"2022-03-12T00:22:24.819Z","comments":true,"path":"api/articles/spring.02.spring基于xml的DI.json","keywords":null,"cover":"/img/spring.png","text":"spring基于xml的DI di（依赖注入）:给属性赋值 bean实例在调用无参构造器创建对象后，要对bean对象的属性进行初始化。初始化是容器自动完成的，称为注入。注入：就是赋值的意思 根据注入方式的不同，常用的有两类：set注入、构造注入。 1. set注入（设值注入） ：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"/头像/100.jpg","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},{"title":"spring.04.基于注解的DI","uid":"6c65710579b101172a7def9fe9f8af7c","slug":"spring.04.基于注解的DI","date":"2022-03-11T14:26:16.000Z","updated":"2022-03-12T00:22:39.636Z","comments":true,"path":"api/articles/spring.04.基于注解的DI.json","keywords":null,"cover":"/img/spring.png","text":"基于注解的DI：通过注解完成Java对象的创建，属性赋值。 1.使用注解的步骤： 加入maven的依赖spring-context，在你加入spring-context的同时，间接加入spring-aop的依赖。使用注解必须使用spring-aop依赖 在类中加入spring的注...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"/头像/100.jpg","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},{"title":"spring.05.AOP面向切面编程","uid":"ab49bc5bb50743ab3f03186f41f79e32","slug":"spring.05.AOP面向切面编程","date":"2022-03-11T14:26:19.000Z","updated":"2022-03-12T01:37:55.518Z","comments":true,"path":"api/articles/spring.05.AOP面向切面编程.json","keywords":null,"cover":"/img/spring.png","text":"一、AOP简介Aop（aspect orient programming） ，面向切面编程。面向切面编程是从动态角度考虑程序运行过程。 AOP底层，就是采用动态代理模式实现的，采用了两种代理：JDK的动态代理，CGLIB的动态代理。 代理实现程序功能的统一维护的一种技术。 AOP...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"/头像/100.jpg","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}}]}