{"title":"spring.01.初步了解spring以及IOC","uid":"b153846ea7b11a1e236e2e9eb42afa6c","slug":"spring.01.初步了解spring以及IOC","date":"2022-03-11T14:00:15.000Z","updated":"2022-03-12T00:22:27.754Z","comments":true,"path":"api/articles/spring.01.初步了解spring以及IOC.json","keywords":null,"cover":"/img/spring.png","content":"<h2 id=\"1-spring简述\"><a href=\"#1-spring简述\" class=\"headerlink\" title=\"1.spring简述\"></a>1.spring简述</h2><p>Spring是一个轻量级的开源框架，是为解决企业级应用开发的复杂性而创建的，通过核心的Bean factory实现了底层的类的实例化和生命周期的管理。<br>   Spring的最根本使命是：简化java开发。</p>\n<ul>\n<li><p><strong>优点</strong></p>\n<ol>\n<li>Spring是一个开源免费的框架 </li>\n<li>Spring是一个轻量级，非侵入式的</li>\n<li>控制反转（ IoC）  , 面向切面 （Aop）</li>\n</ol>\n<p>Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器（框架）。</p>\n</li>\n<li><p><strong>组成</strong></p>\n</li>\n</ul>\n<p><strong>Spring是一个三层架构，也为J2EE应用程序开发提供集成的框架；</strong><br>      <strong>1）Web层：Spring MVC；</strong><br>      <strong>2）业务层 ：Spring的IoC；</strong><br>      <strong>3）持久层 ：Spring的JDBC、ORM、等持久层框架；</strong><br>  Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式 .<br>  <img src=\"/post/spring.01.%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3spring%E4%BB%A5%E5%8F%8AIOC/01.png\" class=\"\" title=\"This is an test image\"></p>\n<p>  组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p>\n<p>   <strong>核心容器：</strong><br>  核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 BeanFactory，它是工厂模式的实现。BeanFactory 使用控制反转（IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>\n<pre><code>**Spring 上下文：**\nSpring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。\n\n**Spring AOP：**\n通过配置管理特性，Spring AOP 模块直接将面向切面的编程功能 , 集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理任何支持 AOP的对象。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖组件，就可以将声明性事务管理集成到应用程序中。\n\n**Spring DAO：**\nJDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。\n\n**Spring ORM：**\nSpring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。\n\n**Spring Web 模块：**\nWeb 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。\n\n**Spring MVC 框架：**\nMVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。\n</code></pre>\n<h2 id=\"2-spring扩展\"><a href=\"#2-spring扩展\" class=\"headerlink\" title=\"2.spring扩展\"></a>2.spring扩展</h2><p>  <strong>Spring Boot与Spring Cloud</strong><br>  Spring Boot 是 Spring 的一套快速配置脚手架，可以基于Spring Boot 快速开发单个微服务;</p>\n<ul>\n<li><p>Spring Cloud是基于Spring Boot实现的；</p>\n</li>\n<li><p>Spring Boot专注于快速、方便集成的单个微服务个体，Spring Cloud关注全局的服务治理框架；</p>\n</li>\n<li><p>Spring Boot使用了约束优于配置的理念，很多集成方案已经帮你选择好了，能不配置就不配置 , Spring Cloud很大的一部分是基于Spring Boot来实现，Spring Boot可以离开Spring Cloud独立使用开发项目，但是Spring Cloud离不开Spring Boot，属于依赖的关系。</p>\n</li>\n<li><p>SpringBoot在SpringClound中起到了承上启下的作用，如果你要学习SpringCloud必须要学习SpringBoot。</p>\n<h2 id=\"3-IOC理论\"><a href=\"#3-IOC理论\" class=\"headerlink\" title=\"3.IOC理论\"></a>3.IOC理论</h2></li>\n</ul>\n<p><strong>控制反转（英语：Inversion of Control，缩写为IoC）</strong>，是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称DI），还有一种方式叫<strong>依赖查找</strong>（Dependency Lookup）。</p>\n<ul>\n<li><p>起源<br>早在2004年，Martin Fowler就提出了“哪些方面的控制被反转了？”这个问题。他总结出是依赖对象的获得被反转了，因为大多数应用程序都是由两个或是更多的类通过彼此的合作来实现业务逻辑，这使得每个对象都需要获取与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么这将导致代码高度耦合并且难以维护和调试。</p>\n</li>\n<li><p>技术描述<br>Class A中用到了Class B的对象b，一般情况下，需要在A的代码中显式地用 new 创建 B 的对象。</p>\n</li>\n</ul>\n<p>采用依赖注入技术之后，A 的代码只需要定义一个 private 的B对象，不需要直接 new 来获得这个对象，而是通过相关的容器控制程序来将B对象在外部new出来并注入到A类里的引用中。而具体获取的方法、对象被获取时的状态由配置文件（如XML）来指定。</p>\n<ul>\n<li>实现方法<br>实现控制反转主要有两种方式：依赖注入和依赖查找。两者的区别在于，前者是被动的接收对象，在类A的实例创建过程中即创建了依赖的B对象，通过类型或名称来判断将不同的对象注入到不同的属性中，而后者是主动索取相应类型的对象，获得依赖对象的时间也可以在代码中自由控制。</li>\n</ul>\n<p><strong>依赖注入</strong><br>依赖注入有如下实现方式：</p>\n<ol>\n<li>基于接口。实现特定接口以供外部容器注入所依赖类型的对象。<br>基于 set 方法。实现特定属性的public set方法，来让外部容器调用传入所依赖类型的对象。</li>\n<li>基于构造函数。实现特定参数的构造函数，在新建对象时传入所依赖类型的对象。</li>\n<li>基于注解。基于Java的注解功能，在私有变量前加“@Autowired”等注解，不需要显式的定义以上三种代码，便可以让外部容器传入对应的对象。该方案相当于定义了public的set方法，但是因为没有真正的set方法，从而不会为了实现依赖注入导致暴露了不该暴露的接口（因为set方法只想让容器访问来注入而并不希望其他依赖此类的对象访问）。</li>\n</ol>\n<p><strong>依赖查找</strong><br>依赖查找更加主动，在需要的时候通过调用框架提供的方法来获取对象，获取时需要提供相关的配置文件路径、key等信息来确定获取对象的状态</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p><strong>控制</strong>：创建对象、对象的属性赋值、对象之间的关系管理。<br><strong>反转</strong>：把原来开发人员创建、管理对象的权限转移给代码之外的容器去实现，由容器代替开发人员去创建对象、对象的属性赋值、对象之间的关系管理。<br><strong>容器</strong>：是一个服务器软件，一个框架（spring）。</p>\n<p> 这种思想 , 从本质上解决了问题 , 我们程序员不再去管理对象的创建了 , 更多的去关注业务的实现 . 耦合性大大降低 . 这也就是IOC的原型 !<br> <img src=\"/post/spring.01.%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3spring%E4%BB%A5%E5%8F%8AIOC/02.png\" class=\"\" title=\"This is an test image\"></p>\n<p> <strong>明白IOC的思想，是理解Spring的核心技巧。</strong></p>\n<h2 id=\"4-IOC的技术实现\"><a href=\"#4-IOC的技术实现\" class=\"headerlink\" title=\"4.IOC的技术实现\"></a>4.IOC的技术实现</h2><p><strong>DI（dependency injection）是ioc的技术实现</strong><br>依赖注入，只需要在程序中提供要使用的对象名称就可以，至于对象如何在容器中被创建、赋值、查找..都由容器内部实现。<br><strong>spring是使用了di实现了ioc的功能，spring底层创建对象，使用的是反射机制</strong><br><a href=\"https://www.bilibili.com/video/BV1nz4y1d7uy?p=9&share_medium=iphone&share_plat=ios&share_source=QQ&share_tag=s_i&timestamp=1641969051&unique_k=Ic5dwvK\">点击观看-&gt;使用spring容器创建对象教程</a></p>\n","text":"1.spring简述Spring是一个轻量级的开源框架，是为解决企业级应用开发的复杂性而创建的，通过核心的Bean factory实现了底层的类的实例化和生命周期的管理。 Spring的最根本使命是：简化java开发。 优点 Spring是一个开源免费的框架 Spring是一个轻...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-spring%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">1.spring简述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-spring%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">2.spring扩展</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-IOC%E7%90%86%E8%AE%BA\"><span class=\"toc-text\">3.IOC理论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93%EF%BC%9A\"><span class=\"toc-text\">总结：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-IOC%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">4.IOC的技术实现</span></a></li></ol>","author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}},"mapped":true,"prev_post":{"title":"spring.02.spring基于xml的DI","uid":"fa52b34bae7d4c54b1124245f3ed007f","slug":"spring.02.spring基于xml的DI","date":"2022-03-11T14:16:15.000Z","updated":"2022-03-12T00:22:24.819Z","comments":true,"path":"api/articles/spring.02.spring基于xml的DI.json","keywords":null,"cover":"/img/spring.png","text":"spring基于xml的DI di（依赖注入）:给属性赋值 bean实例在调用无参构造器创建对象后，要对bean对象的属性进行初始化。初始化是容器自动完成的，称为注入。注入：就是赋值的意思 根据注入方式的不同，常用的有两类：set注入、构造注入。 1. set注入（设值注入） ：...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},"next_post":{"title":"TS型网页视频下载方法","uid":"3c722e589e421720b87a9e591e2b274d","slug":"TS型网页视频下载方法","date":"2022-03-01T11:26:15.000Z","updated":"2022-03-01T12:14:19.797Z","comments":true,"path":"api/articles/TS型网页视频下载方法.json","keywords":null,"cover":"/img/ts.png","text":" 有些网页上的视频是分成多个ts片段的，无法被chrome的各种嗅探器插件捕获，但通过F12开发工具监测网络（Network）文件可以发现（如题图）。 在过滤器中输入m3u8，可以发现一个独立的m3u8文件，这个文件就是记录了所有ts文件片段的一个播放列表。如果没有发现独立的m3...","link":"","photos":[],"count_time":{"symbolsCount":414,"symbolsTime":"1 mins."},"categories":[{"name":"白嫖小技巧","slug":"白嫖小技巧","count":1,"path":"api/categories/白嫖小技巧.json"}],"tags":[{"name":"随笔","slug":"随笔","count":4,"path":"api/tags/随笔.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}}}