{"title":"spring.05.AOP面向切面编程","uid":"ab49bc5bb50743ab3f03186f41f79e32","slug":"spring.05.AOP面向切面编程","date":"2022-03-11T14:26:19.000Z","updated":"2022-03-12T01:37:55.518Z","comments":true,"path":"api/articles/spring.05.AOP面向切面编程.json","keywords":null,"cover":"/img/spring.png","content":"<h2 id=\"一、AOP简介\"><a href=\"#一、AOP简介\" class=\"headerlink\" title=\"一、AOP简介\"></a>一、AOP简介</h2><pre><code>Aop（aspect orient programming） ，面向切面编程。面向切面编程是从动态角度考虑程序运行过程。\nAOP底层，就是采用动态代理模式实现的，采用了两种代理：JDK的动态代理，CGLIB的动态代理。\n代理实现程序功能的统一维护的一种技术。\nAOP 是 Spring 框架中的一个重要内容 。利用 AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程\n序的可重用性，同时提高了开发的效率。\n</code></pre>\n<h3 id=\"1-理解AOP\"><a href=\"#1-理解AOP\" class=\"headerlink\" title=\"1.理解AOP\"></a>1.理解AOP</h3><p>1)要理解切面编程，就需要先理解什么是切面。用刀把一个西瓜分成两瓣，切开的切口就是切面；炒菜，锅与炉子共同来完成炒菜，锅与炉子就是切面。web层级设计中，web层-&gt;网关层-&gt;服务层-&gt;数据层，每一层之间也是一个切面。<strong>编程中，对象与对象之间，方法与方法之间，模块与模块之间都是一个个切面。</strong><br>2)<strong>面向切面编程，就是将交叉业务逻辑封装成切面，利用AOP 容器的功能将切面织入到主业务逻辑中。</strong><br>所谓交叉业务逻辑是指，通用的、与主业务逻辑无关的代码，如安全检查、事务、日志 、缓存等。<br>若不使用AOP ，则会出现代码纠缠，即交叉业务逻辑与主业务逻辑混合在一起。这样会使主业务逻辑变的混杂不清。</p>\n<pre><code>例如，转账，在真正转账业务逻辑前后，需要权限控制、日志记录、加载事务、结束事务等交叉业务逻辑，\n而这些 业务逻辑与主业务逻辑间并无直接关系。但，它们的代码量所占比重能达到总代码量的一半甚至还多。\n它们的存在，不仅产生了大量的“冗余”代码，还大大干扰了主业务逻辑 转账。\n</code></pre>\n<h3 id=\"2-AOP有什么好处？\"><a href=\"#2-AOP有什么好处？\" class=\"headerlink\" title=\"2.AOP有什么好处？\"></a>2.AOP有什么好处？</h3><p>1.减少重复；<br>2.专注业务；<br><mark>注意：面向切面编程只是面向对象编程的一种补充。<mark></p>\n<p>我们一般做活动的时候，一般对每一个接口都会做活动的有效性校验（是否开始、是否结束等等）、以及这个接口是不是需要用户登录。</p>\n<ol>\n<li>按普通人的逻辑<img src=\"/post/spring.05.AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/01.png\" class=\"\" title=\"This is an test image\">\n\n但是这样的话，很多接口就会产生大量重复的代码，而且耦合度太高，牵一发而动全身。</li>\n<li>大神的逻辑<img src=\"/post/spring.05.AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/02.png\" class=\"\" title=\"This is an test image\">\n 于是就有了切面的概念，我将方法注入到接口调用的某个地方（切点）。这样接口只需要关心具体的业务，而不需要关注其他非该接口关注的逻辑或处理。<br> <strong>红框处，就是面向切面编程。</strong></li>\n</ol>\n<h3 id=\"3-AOP中的重要概念\"><a href=\"#3-AOP中的重要概念\" class=\"headerlink\" title=\"3.AOP中的重要概念\"></a>3.AOP中的重要概念</h3><ol>\n<li><strong>Aspect（切面）：</strong><br>  切面泛指<mark>交叉业务逻辑</mark>。一个项目中的琐碎事务处理、日志处理就可以理解为切面。常用的切面是通知（Advice）。实际就是对主业务逻辑的一种增强。在 Aspect 中会包含着一些 Pointcut 以及相应的 Advice。</li>\n<li><strong>Jointpoint（连接点）：</strong><br>表示在程序中明确定义的点，典型的包括方法调用，对类成员的访问以及异常处理程序块的执行等等，它自身还可以嵌套其它 joint point。</li>\n<li><strong>Pointcut（切入点）：</strong><br>表示一组 joint point，这些 joint point 或是通过逻辑关系组合起来，或是通过通配、正则表达式等方式集中起来，它定义了相应的 Advice 将要发生的地方。</li>\n<li><strong>Advice（叫通知也叫增强）：</strong><br><mark>Advice表示切面的执行时间</mark>。它通过 before、after 和 around 来区别是在每个 joint point 之前、之后还是代替执行的代码。</li>\n<li><strong>Target（目标对象）：</strong><br>织入Advice 的目标对象。</li>\n<li><strong>Weaving（织入）：</strong><br>将 Aspect 和其他对象连接起来, 并创建 Adviced object 的过程</li>\n</ol>\n<p><strong>最后是一个描述这些概念之间关系的图：</strong></p>\n<img src=\"/post/spring.05.AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/03.png\" class=\"\" title=\"This is an test image\">\n<h3 id=\"4-面向切面编程简单总结\"><a href=\"#4-面向切面编程简单总结\" class=\"headerlink\" title=\"4.面向切面编程简单总结\"></a>4.面向切面编程简单总结</h3><p>1）需要在分析项目功能时，找出切面。<br>2）合理安排切面的执行时间，target之前还是之后还是代替执行的代码。<br>3）合理安排切面的执行位置，在哪个类、哪个方法增加增强功能。</p>\n","text":"一、AOP简介Aop（aspect orient programming） ，面向切面编程。面向切面编程是从动态角度考虑程序运行过程。 AOP底层，就是采用动态代理模式实现的，采用了两种代理：JDK的动态代理，CGLIB的动态代理。 代理实现程序功能的统一维护的一种技术。 AOP...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81AOP%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">一、AOP简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%90%86%E8%A7%A3AOP\"><span class=\"toc-text\">1.理解AOP</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-AOP%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%EF%BC%9F\"><span class=\"toc-text\">2.AOP有什么好处？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-AOP%E4%B8%AD%E7%9A%84%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">3.AOP中的重要概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4.面向切面编程简单总结</span></a></li></ol></li></ol>","author":{"name":"LIYA的极光","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}},"mapped":true,"prev_post":{"title":"hexo博客图片显示异常的问题","uid":"8eec314ae055e7cdaccd8bbfdd5ebd88","slug":"hexo博客图片显示异常的问题","date":"2021-08-03T10:19:33.000Z","updated":"2022-03-18T00:47:39.759Z","comments":true,"path":"api/articles/hexo博客图片显示异常的问题.json","keywords":null,"cover":"/img/sky.jpg","text":"case1：本地预览图片失败第一步1.找到Hexo下的_config.yml里的post_asset_folder，把这个选项从false改成true。2.在Hexo目录下打开Git Brsh或cmd，执行一个下载上传图片插件的命令npm install hexo-asset-i...","link":"","photos":[],"count_time":{"symbolsCount":739,"symbolsTime":"1 mins."},"categories":[{"name":"网站建设","slug":"网站建设","count":3,"path":"api/categories/网站建设.json"}],"tags":[{"name":"随笔","slug":"随笔","count":4,"path":"api/tags/随笔.json"}],"author":{"name":"LIYA的极光","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}},"feature":true},"next_post":{"title":"spring.04.基于注解的DI","uid":"6c65710579b101172a7def9fe9f8af7c","slug":"spring.04.基于注解的DI","date":"2022-03-11T14:26:16.000Z","updated":"2022-03-12T00:22:39.636Z","comments":true,"path":"api/articles/spring.04.基于注解的DI.json","keywords":null,"cover":"/img/spring.png","text":"基于注解的DI：通过注解完成Java对象的创建，属性赋值。 1.使用注解的步骤： 加入maven的依赖spring-context，在你加入spring-context的同时，间接加入spring-aop的依赖。使用注解必须使用spring-aop依赖 在类中加入spring的注...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"LIYA的极光","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}}}