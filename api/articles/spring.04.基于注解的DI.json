{"title":"spring.04.基于注解的DI","uid":"6c65710579b101172a7def9fe9f8af7c","slug":"spring.04.基于注解的DI","date":"2022-03-11T14:26:16.000Z","updated":"2022-03-12T00:22:39.636Z","comments":true,"path":"api/articles/spring.04.基于注解的DI.json","keywords":null,"cover":"/img/spring.png","content":"<p><strong>基于注解的DI：</strong><br>通过注解完成Java对象的创建，属性赋值。</p>\n<h2 id=\"1-使用注解的步骤：\"><a href=\"#1-使用注解的步骤：\" class=\"headerlink\" title=\"1.使用注解的步骤：\"></a>1.使用注解的步骤：</h2><ol>\n<li>加入maven的依赖spring-context，在你加入spring-context的同时，间接加入spring-aop的依赖。<br>使用注解必须使用spring-aop依赖</li>\n<li>在类中加入spring的注解（多个不同功能的注解）</li>\n<li>在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置</li>\n</ol>\n<p><strong>常用注解：</strong></p>\n<pre><code>1）@Component\n2) @Repository\n3) @Service\n4) @Controller\n5) @Value\n6) @Autowired\n7) @Resource\n</code></pre>\n<h2 id=\"2-实现步骤\"><a href=\"#2-实现步骤\" class=\"headerlink\" title=\"2.实现步骤\"></a>2.实现步骤</h2><ol>\n<li>加入依赖</li>\n<li>创建类，在类中加入注释</li>\n<li>创建spring的配置文件，声明组件扫描器的标签，指名注解在你的项目中的位置。</li>\n<li>使用注解创建对象，创建容器ApplicationContext<h2 id=\"3-要学习的注解：\"><a href=\"#3-要学习的注解：\" class=\"headerlink\" title=\"3.要学习的注解：\"></a>3.要学习的注解：</h2><h3 id=\"1）-Component\"><a href=\"#1）-Component\" class=\"headerlink\" title=\"1）@Component\"></a>1）@Component</h3><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\">@Component: 创建对象的， 等同于<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span><span class=\"token punctuation\">></span></span>的功能\n    属性：value 就是对象的名称，也就是bean的id值，\n          value的值是唯一的，创建的对象在整个spring容器中就一个\n     位置：在类的上面\n\n  @Component(value = \"myStudent\")等同于\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba01.Student<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n  spring中和@Component功能一致，创建对象的注解还有：\n  1.@Repository（用在持久层类的上面） : 放在dao的实现类上面，\n               表示创建dao对象，dao对象是能访问数据库的。\n  2.@Service(用在业务层类的上面)：放在service的实现类上面，\n              创建service对象，service对象是做业务处理，可以有事务等功能的。\n  3.@Controller(用在控制器的上面)：放在控制器（处理器）类的上面，创建控制器对象的，\n              控制器对象，能够接受用户提交的参数，显示请求的处理结果。\n  以上三个注解的使用语法和@Component一样的。 都能创建对象，但是这三个注解还有额外的功能。\n  @Repository，@Service，@Controller是给项目的对象分层的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"代码p1：Student-java\"><a href=\"#代码p1：Student-java\" class=\"headerlink\" title=\"代码p1：Student.java\"></a>代码p1：Student.java</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bjpowernode<span class=\"token punctuation\">.</span>ba01</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用value属性，指定对象名称</span>\n<span class=\"token comment\">//@Component(value = \"myStudent\")</span>\n\n<span class=\"token comment\">//可以这么用，省略value</span>\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myStudent\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//不指定对象名称，由spring提供默认名称: 类名的首字母小写</span>\n<span class=\"token comment\">//@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"==student无参数构造方法===\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"代码p2：applicationContext-xml\"><a href=\"#代码p2：applicationContext-xml\" class=\"headerlink\" title=\"代码p2：applicationContext.xml\"></a>代码p2：applicationContext.xml</h4><pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       https://www.springframework.org/schema/context/spring-context.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\">&lt;!--声明组件扫描器(component-scan),组件就是java对象\n        base-package：指定注解在你的项目中的包名。\n        component-scan工作方式： spring会扫描遍历base-package指定的包，\n           把包中和子包中的所有类，找到类中的注解，按照注解的功能创建对象，或给属性赋值。\n\n       加入了component-scan标签，配置文件的变化：\n        1.加入一个新的约束文件spring-context.xsd\n        2.给这个新的约束文件起个命名空间的名称\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba01<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token comment\">&lt;!--指定多个包的三种方式：--></span>\n     <span class=\"token comment\">&lt;!--第一种：使用多次组件扫描器--></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba01<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba02<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba03<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n     ....\n     <span class=\"token comment\">&lt;!--第二种：使用分隔符;或,分隔多个包名--></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode.ba01;com.bjpowernode.ba02;com.bjpowernode.ba03<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n     <span class=\"token comment\">&lt;!--第三种：指定父包--></span>\n     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.bjpowernode<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2）-Value\"><a href=\"#2）-Value\" class=\"headerlink\" title=\"2）@Value\"></a>2）@Value</h3>@Value：简单类型的属性赋值<br>属性：value是String类型的，表示简单类型的属性值<br>位置：1.写在属性定义的上面，无需set方法<br> 2.写在set方法的上面，不如第一种方便</li>\n</ol>\n<h4 id=\"代码p1：Student-java-1\"><a href=\"#代码p1：Student-java-1\" class=\"headerlink\" title=\"代码p1：Student.java\"></a>代码p1：Student.java</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>bjpowernode<span class=\"token punctuation\">.</span>ba01</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Component</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//使用value属性，指定对象名称</span>\n<span class=\"token comment\">//@Component(value = \"myStudent\")</span>\n\n<span class=\"token comment\">//可以这么用，省略value</span>\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myStudent\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//不指定对象名称，由spring提供默认名称: 类名的首字母小写</span>\n<span class=\"token comment\">//@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"利亚\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public void setAge(Integer age) &#123;\n        this.age = age;\n    &#125;\n*/</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3）-Autowired\"><a href=\"#3）-Autowired\" class=\"headerlink\" title=\"3）@Autowired\"></a>3）@Autowired</h3><p>@Autowired：spring框架提供的注解，实现引用类型的赋值（默认byType）。<br>spring中通过注解给引用类型赋值，使用的是自动注入原理，支持byName，byType。<br>位置：1）在属性定义的上面，无需set方法<br>      2）在set方法的上面</p>\n<h4 id=\"代码p1：引用类型的赋值，默认使用byType\"><a href=\"#代码p1：引用类型的赋值，默认使用byType\" class=\"headerlink\" title=\"代码p1：引用类型的赋值，默认使用byType\"></a>代码p1：引用类型的赋值，默认使用byType</h4><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myStudent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"利亚\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n     <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对引用的类型的赋值</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">School</span> school<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    public Student() &#123;\n        System.out.println(\"==student无参数构造方法===\");\n    &#125;\n\n    public void setName(String name) &#123;\n        this.name = name;\n    &#125;\n\n    public void setAge(Integer age) &#123;\n        this.age = age;\n    &#125;\n    */</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mySchool\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">School</span>\n <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北大\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京的海淀区\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n    其他部分省略。。\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"代码p2：引用类型的赋值，使用byName\"><a href=\"#代码p2：引用类型的赋值，使用byName\" class=\"headerlink\" title=\"代码p2：引用类型的赋值，使用byName\"></a>代码p2：引用类型的赋值，使用byName</h4><p><strong>@Autowired</strong><br><strong>@Qualifier(value&#x3D;”XXX”)</strong></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mySchool\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">School</span>\n <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北大\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"北京的海淀区\"</span><span class=\"token punctuation\">)</span> \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n    其他部分省略。。\n <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token annotation punctuation\">@Component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myStudent\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"利亚\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n     <span class=\"token annotation punctuation\">@Value</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对引用的类型的赋值</span>\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token annotation punctuation\">@Qualifier</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"mySchool\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">School</span> school<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Student&#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"4）-Resource\"><a href=\"#4）-Resource\" class=\"headerlink\" title=\"4）@Resource\"></a>4）@Resource</h3><p>@Resource：来自jdk的注解，spring的框架提供了对这个注解的功能支持，可以使用它给引用类型赋值，使用的也是自动注入原理，支持byName（默认）、byType。<br><strong>@Resource（name&#x3D;””）：默认是byName，先使用byName自动注入，如果name未找到就使用byType</strong><br>位置：</p>\n<ol>\n<li>写在属性定义的上面，无需set方法</li>\n<li>写在set方法的上面</li>\n</ol>\n<h3 id=\"5）-Repository\"><a href=\"#5）-Repository\" class=\"headerlink\" title=\"5）@Repository\"></a>5）@Repository</h3><p>创建dao对象，用来访问数据库</p>\n<h3 id=\"6）-Service\"><a href=\"#6）-Service\" class=\"headerlink\" title=\"6）@Service\"></a>6）@Service</h3><p>创建Service对象，处理业务逻辑，可以有事务功能</p>\n<h3 id=\"7）-Controller\"><a href=\"#7）-Controller\" class=\"headerlink\" title=\"7）@Controller\"></a>7）@Controller</h3><p>创建控制器对象，接收请求、显示处理结果</p>\n","text":"基于注解的DI：通过注解完成Java对象的创建，属性赋值。 1.使用注解的步骤： 加入maven的依赖spring-context，在你加入spring-context的同时，间接加入spring-aop的依赖。使用注解必须使用spring-aop依赖 在类中加入spring的注...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%AD%A5%E9%AA%A4%EF%BC%9A\"><span class=\"toc-text\">1.使用注解的步骤：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">2.实现步骤</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%B3%A8%E8%A7%A3%EF%BC%9A\"><span class=\"toc-text\">3.要学习的注解：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%EF%BC%89-Component\"><span class=\"toc-text\">1）@Component</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81p1%EF%BC%9AStudent-java\"><span class=\"toc-text\">代码p1：Student.java</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81p2%EF%BC%9AapplicationContext-xml\"><span class=\"toc-text\">代码p2：applicationContext.xml</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%EF%BC%89-Value\"><span class=\"toc-text\">2）@Value</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81p1%EF%BC%9AStudent-java-1\"><span class=\"toc-text\">代码p1：Student.java</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%EF%BC%89-Autowired\"><span class=\"toc-text\">3）@Autowired</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81p1%EF%BC%9A%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%B5%8B%E5%80%BC%EF%BC%8C%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8byType\"><span class=\"toc-text\">代码p1：引用类型的赋值，默认使用byType</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81p2%EF%BC%9A%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%B5%8B%E5%80%BC%EF%BC%8C%E4%BD%BF%E7%94%A8byName\"><span class=\"toc-text\">代码p2：引用类型的赋值，使用byName</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%EF%BC%89-Resource\"><span class=\"toc-text\">4）@Resource</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%EF%BC%89-Repository\"><span class=\"toc-text\">5）@Repository</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%EF%BC%89-Service\"><span class=\"toc-text\">6）@Service</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%EF%BC%89-Controller\"><span class=\"toc-text\">7）@Controller</span></a></li></ol></li></ol>","author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}},"mapped":true,"prev_post":{"title":"spring.05.AOP面向切面编程","uid":"ab49bc5bb50743ab3f03186f41f79e32","slug":"spring.05.AOP面向切面编程","date":"2022-03-11T14:26:19.000Z","updated":"2022-03-12T01:37:55.518Z","comments":true,"path":"api/articles/spring.05.AOP面向切面编程.json","keywords":null,"cover":"/img/spring.png","text":"一、AOP简介Aop（aspect orient programming） ，面向切面编程。面向切面编程是从动态角度考虑程序运行过程。 AOP底层，就是采用动态代理模式实现的，采用了两种代理：JDK的动态代理，CGLIB的动态代理。 代理实现程序功能的统一维护的一种技术。 AOP...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}},"next_post":{"title":"spring.03.spring的自动注入","uid":"dbac222cea299f8d84b40392321badcf","slug":"spring.03.spring的自动注入","date":"2022-03-11T14:26:15.000Z","updated":"2022-03-11T15:01:07.676Z","comments":true,"path":"api/articles/spring.03.spring的自动注入.json","keywords":null,"cover":"/img/spring.png","text":"spring引用类型的自动注入引用类型的自动注入： spring框架根据某些规则可以给引用类型赋值。不用手动给引用类型赋值了。使用的规则常用的是byName, byType。 1.byName(按名称注入) ：java类中引用类型的属性名和spring容器中（配置文件）&lt;b...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":5,"path":"api/categories/spring.json"}],"tags":[{"name":"编程备忘录","slug":"编程备忘录","count":5,"path":"api/tags/编程备忘录.json"}],"author":{"name":"流水静深","slug":"blog-author","avatar":"https://qlogo4.store.qq.com/qzone/2586036529/2586036529/100?1625623111","link":"/","description":"liya的博客，记录自己的成长足迹。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/440492783"}}}}}}